// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Describes objects present in a room based on uploaded photos.
 *
 * - describeRoomObjects - A function that takes room photos and returns a list of object names.
 * - DescribeRoomObjectsInput - The input type for the describeRoomObjects function.
 * - DescribeRoomObjectsOutput - The return type for the describeRoomObjects function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DescribeRoomObjectsInputSchema = z.object({
  photoDataUris: z
    .array(z.string())
    .describe(
      'An array of photos of a room, as data URIs that must include a MIME type and use Base64 encoding. Expected format: data:<mimetype>;base64,<encoded_data>.'
    ),
});
export type DescribeRoomObjectsInput = z.infer<typeof DescribeRoomObjectsInputSchema>;

const DescribeRoomObjectsOutputSchema = z.object({
  objectNames: z
    .array(z.string())
    .describe('A list of names of all distinct objects identified in the room photos.'),
});
export type DescribeRoomObjectsOutput = z.infer<typeof DescribeRoomObjectsOutputSchema>;

export async function describeRoomObjects(
  input: DescribeRoomObjectsInput
): Promise<DescribeRoomObjectsOutput> {
  return describeRoomObjectsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'describeRoomObjectsPrompt',
  input: {schema: DescribeRoomObjectsInputSchema},
  output: {schema: DescribeRoomObjectsOutputSchema},
  prompt: `You are an expert at identifying objects in images.
Analyze the provided images of a room.
Your task is to list the name of each and every single distinct item visible in the photos. Be highly accurate and comprehensive.
Return only a list of object names.

{{#each photoDataUris}}
Photo {{@index}}:
{{media url=this}}
{{/each}}`,
});

const describeRoomObjectsFlow = ai.defineFlow(
  {name: 'describeRoomObjectsFlow', inputSchema: DescribeRoomObjectsInputSchema, outputSchema: DescribeRoomObjectsOutputSchema},
  async input => {
    const {output} = await prompt(input);
    if (!output || !output.objectNames) {
      // Handle cases where output might be null or missing objectNames, though schema should enforce
      return { objectNames: [] };
    }
    return output;
  }
);
