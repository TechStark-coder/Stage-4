rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requester is the owner of a specific home
    function isHomeOwner(homeId) {
      // Ensure the home document exists and has an ownerId before checking
      let homeDoc = get(/databases/$(database)/documents/homes/$(homeId));
      return request.auth != null && homeDoc.exists && homeDoc.data.ownerId == request.auth.uid;
    }

    // Users Collection
    match /users/{userId} {
      allow read, create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Homes Collection
    match /homes/{homeId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow update, delete: if isHomeOwner(homeId);
      allow read: if (request.auth != null && request.auth.uid == resource.data.ownerId) ||
                     (request.auth == null);
    }

    // Rooms Subcollection (nested under /homes/{homeId})
    match /homes/{homeId}/rooms/{roomId} {
      // Explicit rule for create, inlining isHomeOwner logic for clarity
      allow create: if request.auth != null &&
                       exists(/databases/$(database)/documents/homes/$(homeId)) &&
                       get(/databases/$(database)/documents/homes/$(homeId)).data.ownerId == request.auth.uid;
      // Use isHomeOwner for update and delete as it's concise
      allow update, delete: if isHomeOwner(homeId);
      allow read: if isHomeOwner(homeId) || (request.auth == null);
    }

    // TenantInspectionLinks Subcollection (nested under /homes/{homeId})
    match /homes/{homeId}/tenantInspectionLinks/{linkId} {
      allow create, delete: if isHomeOwner(homeId);
      allow read: if isHomeOwner(homeId) ||
                     (request.auth == null && resource.data.isActive == true);
      allow update: if isHomeOwner(homeId) ||
                       (
                        request.auth == null && resource.data.isActive == true &&
                        (
                          (
                            request.resource.data.keys().hasAll(['accessCount', 'lastAccessedAt']) &&
                            request.resource.data.keys().size() == 2 &&
                            request.resource.data.accessCount == resource.data.accessCount + 1
                          ) ||
                          (
                            request.resource.data.keys().hasAll(['isActive', 'reportId']) &&
                            request.resource.data.keys().size() == 2 &&
                            request.resource.data.isActive == false &&
                            request.resource.data.reportId != null
                          ) ||
                          (
                            request.resource.data.keys().hasAll(['isActive']) &&
                            request.resource.data.keys().size() == 1 &&
                            request.resource.data.isActive == false
                          )
                        ) &&
                        !request.resource.data.keys().hasAny(['homeId', 'ownerDisplayName', 'tenantName', 'createdAt', 'validUntil'])
                       );
    }

    // InspectionReports Collection (top-level)
    match /inspections/{reportId} {
      allow create: if request.auth == null &&
                       request.resource.data.houseId != null &&
                       request.resource.data.tenantLinkId != null &&
                       exists(/databases/$(database)/documents/homes/$(request.resource.data.houseId)/tenantInspectionLinks/$(request.resource.data.tenantLinkId)) &&
                       get(/databases/$(database)/documents/homes/$(request.resource.data.houseId)/tenantInspectionLinks/$(request.resource.data.tenantLinkId)).data.isActive == true;
      allow read, delete: if request.auth != null &&
                             resource.data.houseId != null &&
                             isHomeOwner(resource.data.houseId);
    }
  }
}
